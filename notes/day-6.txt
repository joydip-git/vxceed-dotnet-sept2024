year 		framework		.net core			C#
------------------------------------------------
2002		1.0										1.0
2003		1.1										1.0
2005		2.0										2.0
2007		3.0										3.0
2008		3.5										3.5
2010		4.0										4.0
2012		4.5										5.0
2015		4.6										6.0
2016		----					1.0
2017		4.7					2.0				7.0
2019		4.8					3.0				8.0

								  .NET
--------------------------------------------
									5.0				9.0
									6.0				10.0
									7.0				11.0
									8.0				12.0
									9.0				13.0

								ICalculation
RegularCalculation		MathematicalCalculation			ScientificCalculation


collections and generic:
------------------------------------
interfaces: 
	IEnumerable => 		IEnumerator GetEnumerator();
	IEnumerable<T> =>  IEnumerator<T> GetEnumerator();

		ICollection
		ICollection<T>
			
			IList
			IList<T>

classes:
List<T>
HashSet<T> => does not allow to add duplicate elements and can't be iterated using for loop.


delegate string Invoker(int num);

class Invoker:MultiCastDelegate (:Delegate:Object)
{
	private Object _target;
	private MethodInfo _method;

	public Invoker(Object target, MethodInfo method)
	{
		_method = method;
		_target = target;
	}

	public Object Target => _target;
	public MethodInfo Method => _method;

	public string Invoke(int num)
	{
		_method.Invoke(_target,num);
	}
}

call();
//function declaration
function call(){
}
call();

//call1(); => not possible
//function expression
var call1 = function(){

}
call1();

Predicate<T> => delegate bool Predicate<in T>(T item);
Action<T> => delegate void Action<in T>(T item);

Action<int> printNum = (num)=>Console.WriteLine(num);
Predicate<int> isEven = (num)=>num%2==0;

Func => delegate TResult Func<out TResult>();
Func => delegate TResult Func<in TInput1, out TResult>(TInput1 x);
Func => delegate TResult Func<in TInput1,in TInput2, out TResult>(TInput1 x, TInput2 y);
.....
Func => delegate TResult Func<in TInput1,..,in TInput16, out TResult>(TInput1 x, ...,TInput16 a);


class List<T>:IEnumerable<T>, IList<T>, ICollection<T>{
	Add
	Remove
	//Where
}

static class Enumerable<T>{
	public static IEnumerable<T> Where(this IEnumerable<T> e, Func<T,bool> func)
	{
		IEnumerable<T> result = new List<T>();
		foreach(T item in e)
		{
			if(func(item))
				result.add(item)
		}
		return result;
	}
}









