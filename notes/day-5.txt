base method/property		child class same method/property    next child class same method/property
virtual 					=> 				override
abstract					=> 				override
virtual/abstract		=>				override						=> override

a pure abstract class => interface
a. only abstract methods/properties are allowed
b. no data memeber, constructor can be written inside an interface, except a const and/or static data
object of interface can't be created
when a class "implements" an interface, the class must implement all the interface members and 
while implementing the interface members you don't need to use "override" keyword
if a class does not implement the interface members, that class becomes an abstract class
you must declare the class with abstract keyword, as well as you must write the method of interface
inside the class with "public" access specifier and "abstract" keyword

all interface members are by default public and abstract. don't use any access specifiers with them.

a clas can implement more than one interface
if a class inherits from another class as well as implements one or more than one interface, then mention the class ame first, follwed by the interface names

abstract class vs. interface
-----------------------------------
1. abstract class can have both non-abstract/concrete and abstract methods/properties
	interface can't have non-abstract/concrete methods/properties

2. inside abstract class you can have static, const and non-static data members
	inside interface you can have ONLY static and const data members

3. inside abstract class, you can explicitly write constructors
	inside interface, you can't explicitly write constructors

4. abstract class members can be declared with access specifiers (private, public, etc.)
	interface members can't be declared with any access specifiers (private, public, etc.). interface members are all by default public.

5. abstract class members are not by default abstract. you need to declare an abstract method/property with "abstract" keyword.
	interface members are by default abstract. you need not to declare an abstract method/property with "abstract" keyword.

6. while implementing abstract methods/properties in a child class, you must use "override" keyword
	while implementing interface methods/properties in a child class, you need not to use "override" keyword.


1. both abstract class and interface objects can't be created
2. both are used just as a base template


public class Circle
{
	//auto-implemented/automatic property
    public double Radius {  get; set; }

	 public Circle(){}
	 public Circle(double _radius)
	 {
		Radius = _radius;
	 }
}

IL Code:
public class Circle
{
	 private double _Radius;
    public double Radius {  get=> _Radius; set=>_Radius=value; }
	 public Circle(){}
	 public Circle(double _radius)
	 {
		Radius = _radius;
	 }
	
}

//when to not use auto-implemented property: if you have some amount code to be written inside set or get (such as validation)
public class Circle
{
	private double radius;
   public double Radius 
	{  
		get=> radius;
		set
		{
			if(value>0)
				radius=value;
		}
	}
}

source code:
public abstract class Person
{
    //automatic-property initializer
    public string? Name { get; set; } = null;
    public Person()
    {
        
    }
}

IL Code:
public abstract class Person
{
    private string? _name = null;
    public string? Name { get=>_name; set=>_name=value; }
    public Person()
    {
        
    }
}

exception handling:
runtime errors

Exception => message, source, targetsite etc.
	=> public Exception(){}
	=> public Exception(string? message){ this.message = message;}


	SystemException
		DivideByZeroException
		NullReferenceException
		ArithmeticException
		FormatException

	ApplicationException 
			=> public ApplicationException ():base(message) {}
			=> public ApplicationException(string? message):base(message){}

		InavlidAgeException
			=>public InavlidAgeException():base("default message"){}
			=>public InavlidAgeException(string? message):base(message){}












