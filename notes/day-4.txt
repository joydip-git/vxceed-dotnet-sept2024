Inheritance:
	when child class object is created, always first base class's default ctor always will be invoked, along with child class's ctor.
	when child class object is created, you can invoke other ctors of the base class explicitly by using the "base" keyword from child class's ctor
	"base" keyword is used to call "immediate" base class's other (public) members too.
	"base" keyword refers the "immediate" base class of the child/derived class.
	private members are also inherited in child class, though they are not accessible.
	to make base class's members accessible to child class, make the members as protected.
	C# does not support multiple inheritance of class.

Polymorphism:
	1. static/compile time : which method will be called during runtime is decided during the compilation time by the compiler.
		a. method overloading: 
		parameters => 
		i. data type of parameters
		ii. number of parameters
		iii. position/order of the parameters
		b. operator overloading

	2. runtime/dynamic: (same) method of which child class will be called decided during runtime, as the objects are created during runtime.
		declare the method in the base class with "virtual" keyword
		declare the same method in the child class with "override" keyword

Abstract:
	method/property: a method/property which do not have any implementation (code), just declaration.
	you must declare an abstract method/property with "abstract" keyword (which means by default virtual too)
	
	class: a class having at least an abstract method/property is an abstract class.In C#, an abstract class must be declared with "abstract" keyword.
		Object of an abstract class can't be created.
		An abstract class, like any concrete class, can have data members, constructors and other non-abstract methods/properties too.

	Reason: to provide a template with some method/property signatures which must be inherited into and then implemented by the child classes

	Rules: a child class inheriting from abstract base class MUST implement all the abstract members of the base class, otherwise the child class itself has to be an abstract class.
	while implementing the abstract members of the base class, child class should use "override" keyword, as the "abstract" members are by default "virtual".

not possible:
internal class B{}
public class Developer:Employee{}

single
A -> B
multi-level
A<-B<-C

multiple: (not supported in C#)
A, B -> C

Developer -> Employee -> Object






